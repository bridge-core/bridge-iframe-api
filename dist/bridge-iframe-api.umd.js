(function(n,o){typeof exports=="object"&&typeof module!="undefined"?o(exports):typeof define=="function"&&define.amd?define(["exports"],o):(n=typeof globalThis!="undefined"?globalThis:n||self,o(n.BridgeIframeAPI={}))})(this,function(n){"use strict";class o{constructor(e=window.top){if(this.listeners=new Map,this.awaitingResponse=new Map,!e)throw new Error("You must provide a valid target in order to create a channel");this.target=e}get port(){if(!this._port)throw new Error("You must open the channel/connect to a channel before triggering events");return this._port}open(){return new Promise(e=>{const t=async s=>{s.data!=="bridge-editor:connect"||s.ports.length===0||(this._port=s.ports[0],this.startListening(),globalThis.removeEventListener("message",t),await this.trigger("bridge-editor:connected",null),e())};globalThis.addEventListener("message",t)})}connect(){const e=new MessageChannel;return this._port=e.port1,this.startListening(),this.target.postMessage("bridge-editor:connect","*",[e.port2]),new Promise(t=>{this.on("bridge-editor:connected",()=>{t()})})}startListening(){console.log("STARTING TO LISTEN TO EVENTS"),this.port.addEventListener("message",async e=>{const{type:t,origin:s,uuid:r,error:d,payload:g}=e.data;if(console.log(e),t==="response"){const i=this.awaitingResponse.get(r);if(!i)throw new Error(`No response handler for ${r}`);i(g,d),this.awaitingResponse.delete(r);return}const a=this.listeners.get(t);!a||this.respond(r,await a(g,s))}),this.port.start()}respond(e,t){console.log(`Responded to ${e} with ${t}`),this.port.postMessage({type:"response",uuid:e,origin:window.origin,payload:t})}trigger(e,t,s){return new Promise((r,d)=>{const g=(l,p)=>{if(p){d(p);return}a&&clearTimeout(a),r(l)},a=s?setTimeout(()=>{this.awaitingResponse.delete(i),d(new Error("Response timed out"))},s):null,i=crypto.randomUUID();this.awaitingResponse.set(i,g),this.simpleTrigger(e,t,i)})}simpleTrigger(e,t,s=crypto.randomUUID()){return console.log(`Triggered event ${e} with data ${t} and triggerId ${s}`),this.port.postMessage({type:e,uuid:s,origin:window.origin,payload:t}),s}on(e,t){if(e==="response")throw new Error("The response event type is reserved for internal use.");if(this.listeners.has(e))throw new Error(`Event handler for event "${e}" already exists`);return this.listeners.set(e,t),{dispose:()=>{this.listeners.delete(e)}}}}n.Channel=o,Object.defineProperties(n,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
