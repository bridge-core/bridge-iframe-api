(function(r,i){typeof exports=="object"&&typeof module!="undefined"?i(exports):typeof define=="function"&&define.amd?define(["exports"],i):(r=typeof globalThis!="undefined"?globalThis:r||self,i(r.BridgeIframeAPI={}))})(this,function(r){"use strict";class i{constructor(e=window.top){if(!e)throw new Error("You must provide a valid target in order to create a channel");this.target=e}matchesChannel(e){return e===void 0?!0:this.channelId?this.channelId===e:!1}async open(e=3e3){const n=await this.trigger("connect",null,e);this.channelId=n}connect(){this.on("connect",(e,n,t)=>{this.channelId||(this.channelId=crypto.randomUUID(),t(this.channelId))})}trigger(e,n,t){const a=this.simpleTrigger(e,n);return new Promise((l,d)=>{const s=h=>{const{type:u,uuid:g,channelId:p,error:c,payload:f}=h.data;if(!(u!=="response"||!this.matchesChannel(p)||g!==a)){if(c){d(c);return}o&&clearTimeout(o),globalThis.removeEventListener("message",s),l(f)}},o=t?setTimeout(()=>{globalThis.removeEventListener("message",s)},t):null;globalThis.addEventListener("message",s)})}simpleTrigger(e,n){const t=crypto.randomUUID();return this.target.postMessage({type:e,channelId:this.channelId,uuid:t,origin:window.origin,payload:n},"*"),t}on(e,n){if(e==="response")throw new Error("The response event type is reserved for internal use.");const t=a=>{const{type:l,channelId:d,origin:s,uuid:o,payload:h}=a.data;l!==e||!this.matchesChannel(d)||n(h,s,this.createResponseFunction(o))};return globalThis.addEventListener("message",t),{dispose:()=>{globalThis.removeEventListener("message",t)}}}createResponseFunction(e){return n=>{this.target.postMessage({type:"response",channelId:this.channelId,uuid:e,origin:window.origin,payload:n},"*")}}}r.Channel=i,Object.defineProperties(r,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
