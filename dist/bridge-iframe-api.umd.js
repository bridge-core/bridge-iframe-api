(function(n,o){typeof exports=="object"&&typeof module!="undefined"?o(exports):typeof define=="function"&&define.amd?define(["exports"],o):(n=typeof globalThis!="undefined"?globalThis:n||self,o(n.BridgeIframeAPI={}))})(this,function(n){"use strict";class o{constructor(e=window.top){if(this.listeners=new Map,this.awaitingResponse=new Map,!e)throw new Error("You must provide a valid target in order to create a channel");this.target=e}get port(){if(!this._port)throw new Error("You must open the channel/connect to a channel before triggering events");return this._port}open(){return new Promise(e=>{const t=async s=>{s.data!=="bridge-editor:connect"||s.ports.length===0||(this._port=s.ports[0],this.startListening(),globalThis.removeEventListener("message",t),await this.trigger("bridge-editor:connected",null),e())};globalThis.addEventListener("message",t)})}connect(){const e=new MessageChannel;return this._port=e.port1,this.startListening(),this.target.postMessage("bridge-editor:connect","*",[e.port2]),new Promise(t=>{this.on("bridge-editor:connected",()=>{t()})})}startListening(){this.port.addEventListener("message",async e=>{const{type:t,noResponse:s,origin:a,uuid:r,error:g,payload:p}=e.data;if(t==="response"){const d=this.awaitingResponse.get(r);if(!d){console.error(`No response handler for ${r}`);return}d(p,g),this.awaitingResponse.delete(r);return}const i=this.listeners.get(t);if(!i)return;const h=await i(p,a);s||this.respond(r,h)}),this.port.start()}respond(e,t){this.port.postMessage({type:"response",uuid:e,origin:window.origin,payload:t})}trigger(e,t,s){return new Promise((a,r)=>{const g=(h,d)=>{if(d){r(d);return}p&&clearTimeout(p),a(h)},p=s?setTimeout(()=>{this.awaitingResponse.delete(i),r(new Error("Response timed out"))},s):null,i=crypto.randomUUID();this.awaitingResponse.set(i,g),this._simpleTrigger(e,t,i)})}_simpleTrigger(e,t,s=crypto.randomUUID(),a){this.port.postMessage({type:e,noResponse:a,uuid:s,origin:window.origin,payload:t})}simpleTrigger(e,t){this._simpleTrigger(e,t,void 0,!0)}on(e,t){if(e==="response")throw new Error('The "response" event type is reserved for internal use.');if(this.listeners.has(e))throw new Error(`Event handler for event "${e}" already exists`);return this.listeners.set(e,t),{dispose:()=>{this.listeners.delete(e)}}}}n.Channel=o,Object.defineProperties(n,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
