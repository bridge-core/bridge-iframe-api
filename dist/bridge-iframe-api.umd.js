(function(n,i){typeof exports=="object"&&typeof module!="undefined"?i(exports):typeof define=="function"&&define.amd?define(["exports"],i):(n=typeof globalThis!="undefined"?globalThis:n||self,i(n.BridgeIframeAPI={}))})(this,function(n){"use strict";class i{constructor(e=window.top){if(this.listeners=new Map,this.awaitingResponse=new Map,!e)throw new Error("You must provide a valid target in order to create a channel");this.target=e}get port(){if(!this._port)throw new Error("You must open the channel/connect to a channel before triggering events");return this._port}open(){return new Promise(e=>{const t=async r=>{r.data!=="bridge-editor:connect"||r.ports.length===0||(this._port=r.ports[0],this.startListening(),globalThis.removeEventListener("message",t),await this.trigger("bridge-editor:connected",null),e())};globalThis.addEventListener("message",t)})}connect(){const e=new MessageChannel;return this._port=e.port1,this.startListening(),this.target.postMessage("bridge-editor:connect","*",[e.port2]),new Promise(t=>{this.on("bridge-editor:connected",()=>{t()})})}startListening(){this.port.addEventListener("message",e=>{const{type:t,origin:r,uuid:s,payload:d}=e.data;if(t==="response"){const a=this.awaitingResponse.get(s);if(!a)throw new Error(`No response handler for ${s}`);a(e),this.awaitingResponse.delete(s);return}const o=this.listeners.get(t);!o||this.respond(s,o(d,r))})}trigger(e,t,r){const s=this.simpleTrigger(e,t);return new Promise((d,o)=>{const a=h=>{const{error:p,payload:l}=h.data;if(p){o(p);return}g&&clearTimeout(g),d(l)},g=r?setTimeout(()=>{this.awaitingResponse.delete(s)},r):null;this.awaitingResponse.set(s,a)})}simpleTrigger(e,t){const r=crypto.randomUUID();return this.port.postMessage({type:e,uuid:r,origin:window.origin,payload:t}),r}on(e,t){if(e==="response")throw new Error("The response event type is reserved for internal use.");if(this.listeners.has(e))throw new Error(`Event handler for event "${e}" already exists`);return this.listeners.set(e,t),{dispose:()=>{this.listeners.delete(e)}}}respond(e,t){this.port.postMessage({type:"response",uuid:e,origin:window.origin,payload:t})}}n.Channel=i,Object.defineProperties(n,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
