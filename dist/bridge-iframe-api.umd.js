(function(n,t){typeof exports=="object"&&typeof module!="undefined"?t(exports):typeof define=="function"&&define.amd?define(["exports"],t):(n=typeof globalThis!="undefined"?globalThis:n||self,t(n.BridgeIframeAPI={}))})(this,function(n){"use strict";function t(e,r,i=window.top){const o=a(e,r,i);return new Promise((d,g)=>{const s=u=>{const{type:p,uuid:c,error:l,payload:m}=u.data;if(!(p!=="response"||c!==o)){if(l){g(l);return}globalThis.removeEventListener("message",s),d(m)}};globalThis.addEventListener("message",s)})}function a(e,r,i=window.top){if(!i)throw new Error("A trigger target is required");const o=crypto.randomUUID();return i.postMessage({type:e,uuid:o,origin:window.origin,payload:r},"*"),o}function f(e,r,i=window.top){if(e==="response")throw new Error("The response event type is reserved for internal use.");const o=d=>{const{type:g,origin:s,uuid:u,payload:p}=d.data;g===e&&r(p,s,w(u,i))};return globalThis.addEventListener("message",o),{dispose:()=>{globalThis.removeEventListener("message",o)}}}function w(e,r=window.top){if(!r)throw new Error("A response target is required");return i=>{r.postMessage({type:"response",uuid:e,origin:window.origin,payload:i},"*")}}f("openWithFile",(e,r,i)=>{i(e)}),n.on=f,n.simpleTrigger=a,n.trigger=t,Object.defineProperties(n,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
