(function(r,s){typeof exports=="object"&&typeof module!="undefined"?s(exports):typeof define=="function"&&define.amd?define(["exports"],s):(r=typeof globalThis!="undefined"?globalThis:r||self,s(r.BridgeIframeAPI={}))})(this,function(r){"use strict";class s{constructor(e=window.top){if(!e)throw new Error("You must provide a valid target in order to create a channel");this.target=e}get port(){if(!this._port)throw new Error("You must open the channel/connect to a channel before triggering events");return this._port}open(){const e=new MessageChannel;this._port=e.port1,this.target.postMessage("open-channel","*",[e.port2])}async connect(){const e=t=>{t.data==="open-channel"&&t.ports.length>0&&(this._port=t.ports[0]),globalThis.removeEventListener("message",e)};globalThis.addEventListener("message",e)}trigger(e,t,n){const a=this.simpleTrigger(e,t);return new Promise((p,d)=>{const o=u=>{const{type:h,uuid:l,channelId:m,error:g,payload:c}=u.data;if(!(h!=="response"||l!==a)){if(g){d(g);return}i&&clearTimeout(i),this.port.removeEventListener("message",o),p(c)}},i=n?setTimeout(()=>{this.port.removeEventListener("message",o)},n):null;this.port.addEventListener("message",o)})}simpleTrigger(e,t){const n=crypto.randomUUID();return this.port.postMessage({type:e,uuid:n,origin:window.origin,payload:t}),n}on(e,t){if(e==="response")throw new Error("The response event type is reserved for internal use.");const n=a=>{const{type:p,origin:d,uuid:o,payload:i}=a.data;p===e&&t(i,d,this.createResponseFunction(o))};return this.port.addEventListener("message",n),{dispose:()=>{this.port.removeEventListener("message",n)}}}createResponseFunction(e){return t=>{this.port.postMessage({type:"response",uuid:e,origin:window.origin,payload:t})}}}r.Channel=s,Object.defineProperties(r,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
