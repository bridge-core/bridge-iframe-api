(function(r,l){typeof exports=="object"&&typeof module!="undefined"?l(exports):typeof define=="function"&&define.amd?define(["exports"],l):(r=typeof globalThis!="undefined"?globalThis:r||self,l(r.BridgeIframeAPI={}))})(this,function(r){"use strict";class l{constructor(e=window.top){if(!e)throw new Error("You must provide a valid target in order to create a channel");this.target=e}matchesChannel(e){return e===void 0?!0:this.channelId?this.channelId===e:!1}open(e=3e3){if(!this.channelId)return new Promise((t,n)=>{const d=setTimeout(()=>{s.dispose(),n(new Error("Channel target did not respond"))},e),s=this.on("connect",(h,i,o)=>{if(this.channelId)throw new Error("Invalid state: Channel is already open but still listens for connect events");clearTimeout(d),s.dispose();const a=crypto.randomUUID();o(a),this.channelId=a,t()})})}async connect(){if(this.channelId)return;const e=await this.trigger("connect",null);this.channelId=e}trigger(e,t,n){const d=this.simpleTrigger(e,t);return new Promise((s,h)=>{const i=a=>{const{type:u,uuid:g,channelId:p,error:c,payload:f}=a.data;if(!(u!=="response"||!this.matchesChannel(p)||g!==d)){if(c){h(c);return}o&&clearTimeout(o),globalThis.removeEventListener("message",i),s(f)}},o=n?setTimeout(()=>{globalThis.removeEventListener("message",i)},n):null;globalThis.addEventListener("message",i)})}simpleTrigger(e,t){const n=crypto.randomUUID();return this.target.postMessage({type:e,channelId:this.channelId,uuid:n,origin:window.origin,payload:t},"*"),n}on(e,t){if(e==="response")throw new Error("The response event type is reserved for internal use.");const n=d=>{const{type:s,channelId:h,origin:i,uuid:o,payload:a}=d.data;s!==e||!this.matchesChannel(h)||t(a,i,this.createResponseFunction(o))};return globalThis.addEventListener("message",n),{dispose:()=>{globalThis.removeEventListener("message",n)}}}createResponseFunction(e){return t=>{this.target.postMessage({type:"response",channelId:this.channelId,uuid:e,origin:window.origin,payload:t},"*")}}}r.Channel=l,Object.defineProperties(r,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
